1) What happens when you initialize a repository? Why do you need to do it?

What happens is that a hidden directory named .git is created, containing metadata that keep track of the repository changes.
This step is necessary in order to start aking commits.
----------------------------
2) How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a logical area into which files to be commited are held, whereas a working directory is the actual
physical space into which the repository is held along with all the files, tracked by git for changes or not tracked.
The value it offers, is related to the ability that is provided to the user to seperate commits on groups of specific files
which are logicaly related.
-----------------------------
3) How can you use the staging area to make sure you have one commit per logical change?

I use git add to put into the staging area all the files which contain
logically related changes. I then apply these changes into a coherent commit.
-----------------------------
4) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

There might be a situation where we would like to develop an experimental version of our program, or some other
where we would like to have the program developed for a different language. Creatin a separate branch for each
of these cases, would make sure that we keep the different development directions and objectives safely separated.
------------------------------
5) How do the diagrams help you visualize the branch structure?

Since each commit in the diagram is shown in a parent-child relationship for every branch, it is easy
for the programmer to keep track of his coding history. Unreachable commits are a special case which
can be both useful and risky as well, depending on what use one makes of them.